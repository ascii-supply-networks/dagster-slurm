name: build, test, release

on:
  push:
    branches: [ main ]
    paths:
      - 'projects/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
    paths:
      - 'projects/**'
  workflow_dispatch:

concurrency:
  group: library-main-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-pr:
    name: Validate PR Title
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
            ci
            build
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
  validation:
    name: Validate library
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    # TODO: Eventually specify a slurm cluster here for CI/CD via a (single) docker container so we can validate in CI/CD
    # services:
    #   postgres:
    #     image: postgres:17.5-alpine3.22
    #     env:
    #       POSTGRES_USER: ${{ env.BACKEND_APPLICATION__DATABASE__USERNAME }}
    #       POSTGRES_PASSWORD: ${{ env.BACKEND_APPLICATION__DATABASE__PASSWORD }}
    #       POSTGRES_DB: ${{ env.BACKEND_APPLICATION__DATABASE__DATABASE_NAME }}
    #     ports:
    #       - 7432:5432
    #     # Add health check to ensure postgres is ready  
    #     options: >-
    #       --health-cmd "pg_isready -U test_user -d test_db"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - uses: prefix-dev/setup-pixi@v0.8.14
        with:
            pixi-version: v0.50.2
            cache: true
            frozen: true
      - run: pixi run -e build --frozen lint

      - run: pixi run -e build --frozen test

      - run: pixi run -e build --frozen build-lib

  prerelease:
    name: Create pre-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read
      id-token: write
    needs: validation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'Automatically generated by python-semantic-release')
    environment: pre-release
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - uses: prefix-dev/setup-pixi@v0.8.14
        with:
            pixi-version: v0.50.2
            cache: true
            frozen: true

      - run: pixi run -e build --frozen sync

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create pre-release
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          set -e

          # Create pre-release version
          uv run semantic-release version --prerelease

          if ! git diff --staged --quiet; then
            git commit -m "chore: additional changes [skip ci]"
          fi
          
          # Push changes and tags
          git push origin main
          git push --tags
          
          # Create GitHub pre-release
          uv run semantic-release publish
      
      - name: Publish pre-release to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1

  release:
    name: Create full release
    runs-on: ubuntu-latest
    needs: validation
    permissions:
      contents: write       # Push commits, tags, and create releases
      pull-requests: read   # Read PR information for changelog generation
      issues: read          # Read issues for linking in releases
      packages: write       # Publish packages to GitHub Packages
      id-token: write
    if: github.event_name == 'workflow_dispatch'
    environment: release
    steps:
      - name: Validate release prerequisites
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep "version =" pyproject.toml | head -1 | cut -d'"' -f2)
          echo "üìã Current version: $CURRENT_VERSION"
          echo "üéØ Release type: ${{ github.event.inputs.release_type }}"
          
          case "${{ github.event.inputs.release_type }}" in
            "release")
              echo "üîç Validating prerelease promotion..."
              
              # Check if current version is a prerelease
              if echo "$CURRENT_VERSION" | grep -E "(rc|alpha|beta)" >/dev/null; then
                PRERELEASE_TAG="v$CURRENT_VERSION"
                echo "üîç Looking for prerelease tag: $PRERELEASE_TAG"
                
                # Check if the prerelease exists and is marked as prerelease
                if gh release view "$PRERELEASE_TAG" >/dev/null 2>&1; then
                  IS_PRERELEASE=$(gh release view "$PRERELEASE_TAG" --json isPrerelease --jq '.isPrerelease')
                  if [ "$IS_PRERELEASE" = "true" ]; then
                    echo "‚úÖ Found valid prerelease: $PRERELEASE_TAG"
                    echo "‚úÖ Ready to promote to full release"
                  else
                    echo "‚ùå Release $PRERELEASE_TAG exists but is not marked as prerelease"
                    exit 1
                  fi
                else
                  echo "‚ùå Prerelease $PRERELEASE_TAG not found"
                  echo "üí° You must create a prerelease first by pushing changes to main branch"
                  exit 1
                fi
              else
                echo "‚ùå Current version ($CURRENT_VERSION) is not a prerelease"
                echo "üí° Use 'patch', 'minor', or 'major' to create a new release"
                echo "üí° Or push changes to main to create a prerelease first"
                exit 1
              fi
              ;;
              
            "patch"|"minor"|"major")
              echo "üîç Validating new ${{ github.event.inputs.release_type }} release..."
              
              # Check if current version is already a clean release (not prerelease)
              if echo "$CURRENT_VERSION" | grep -E "(rc|alpha|beta)" >/dev/null; then
                echo "‚ö†Ô∏è  Current version ($CURRENT_VERSION) is a prerelease"
                echo "üí° Consider using 'release' to promote the prerelease"
                echo "üí° Or continuing with ${{ github.event.inputs.release_type }} bump (will skip prerelease)"
              else
                echo "‚úÖ Current version is a clean release, ready for ${{ github.event.inputs.release_type }} bump"
              fi
              
              # Check that we don't have uncommitted changes
              if [ -n "$(git status --porcelain)" ]; then
                echo "‚ùå Working directory is not clean"
                git status
                exit 1
              fi
              
              echo "‚úÖ Ready to create new ${{ github.event.inputs.release_type }} release"
              ;;
              
            "prerelease")
              echo "üîç Validating prerelease creation..."
              echo "‚úÖ Ready to create new prerelease"
              ;;
              
            *)
              echo "‚ùå Unknown release type: ${{ github.event.inputs.release_type }}"
              exit 1
              ;;
          esac
          
          echo ""
          echo "üéâ Validation passed! Proceeding with release..."

      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - uses: prefix-dev/setup-pixi@v0.8.14
        with:
            pixi-version: v0.50.2
            cache: true
            frozen: true

      - run: pixi run -e build --frozen sync

      # - name: Download build artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: dist-files
      #     path: dist/

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create release
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          set -e

          uv run semantic-release version

          if ! git diff --staged --quiet; then
            git commit -m "chore: additional changes [skip ci]"
          fi

          git push origin main
          git push --tags
          uv run semantic-release publish
          
      - name: Publish to PyPI (Trusted Publishing)
        if: github.event.inputs.release_type != 'prerelease'
        uses: pypa/gh-action-pypi-publish@release/v1
