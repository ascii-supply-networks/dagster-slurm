name: build, test, release

on:
  push:
    branches: [ main ]
    paths:
      - 'projects/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
    paths:
      - 'projects/**'
  workflow_dispatch:

concurrency:
  group: library-main-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/slurm-docker-cluster
  SLURM_VERSION: 25-05-3-1

jobs:
  validate-pr:
    name: Validate PR Title
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
            ci
            build
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
  validation:
    name: Validate library
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      packages: read
    # TODO: Eventually specify a slurm cluster here for CI/CD via a (single) docker container so we can validate in CI/CD
    # services:
    #   postgres:
    #     image: postgres:17.5-alpine3.22
    #     env:
    #       POSTGRES_USER: ${{ env.BACKEND_APPLICATION__DATABASE__USERNAME }}
    #       POSTGRES_PASSWORD: ${{ env.BACKEND_APPLICATION__DATABASE__PASSWORD }}
    #       POSTGRES_DB: ${{ env.BACKEND_APPLICATION__DATABASE__DATABASE_NAME }}
    #     ports:
    #       - 7432:5432
    #     # Add health check to ensure postgres is ready  
    #     options: >-
    #       --health-cmd "pg_isready -U test_user -d test_db"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - uses: prefix-dev/setup-pixi@v0.9.1
        with:
            pixi-version: v0.56.0
            cache: true
            frozen: true
      - run: pixi run -e build --frozen lint

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Start SLURM Cluster using pre-built image
      #   env:
      #     IMAGE_TAG: latest # Use the 'latest' tag built by the image-builder workflow
      #   run: docker compose up -d
      #   # REMOVED: --build. This is now much faster.
      #   # docker-compose will pull the 'latest' image from ghcr.io.

      # - name: Wait for SLURM Cluster to be Ready
      #   run: |
      #     echo "Waiting for SLURM nodes to become idle..."
      #     for i in {1..24}; do
      #       if docker exec slurmctld sinfo | grep -q "idle"; then
      #         echo "‚úÖ SLURM nodes are ready!"
      #         docker exec slurmctld sinfo
      #         exit 0
      #       fi
      #       echo "Still waiting... ($i/24)"
      #       sleep 5
      #     done
      #     echo "‚ùå SLURM cluster did not become ready in time."
      #     docker compose logs
      #     exit 1

      - name: Run tests against SLURM cluster
        env:
          SLURM_EDGE_NODE: localhost
          SLURM_EDGE_NODE_PORT: 2223
          SLURM_EDGE_NODE_USER: submitter
          SLURM_EDGE_NODE_PASSWORD: submitter
        run: pixi run -e build --frozen testpixi

      # - name: Stop SLURM Cluster and Clean Up
      #   if: always()
      #   run: |
      #     echo "Tearing down SLURM cluster..."
      #     docker compose logs
      #     docker compose down -v

      - run: pixi run -e build --frozen build-lib

  prerelease:
    name: Create pre-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read
      id-token: write
    needs: validation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'Automatically generated by python-semantic-release')
    environment: pre-release
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - uses: prefix-dev/setup-pixi@v0.9.1
        with:
            pixi-version: v0.56.0
            cache: true
            frozen: true

      - run: pixi run -e build --frozen sync

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create pre-release
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          set -e

          # Create pre-release version
          uv run semantic-release version --prerelease

          if ! git diff --staged --quiet; then
            git commit -m "chore: additional changes [skip ci]"
          fi
          
          # Push changes and tags
          git push origin main
          git push --tags
          
          # Create GitHub pre-release
          uv run semantic-release publish
      
      - name: Publish pre-release to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

  release:
    name: Promote prerelease to full release
    runs-on: ubuntu-latest
    needs: validation
    permissions:
      contents: write       # Push commits, tags, and create releases
      pull-requests: read   # Read PR information for changelog generation
      issues: read          # Read issues for linking in releases
      packages: write       # Publish packages to GitHub Packages
      id-token: write
    if: github.event_name == 'workflow_dispatch'
    environment: release
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Validate and promote prerelease
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          set -e
          
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep "version =" pyproject.toml | head -1 | cut -d'"' -f2)
          echo "üìã Current version: $CURRENT_VERSION"
          
          # Check if current version is a prerelease
          if echo "$CURRENT_VERSION" | grep -E "(rc|alpha|beta)" >/dev/null; then
            PRERELEASE_TAG="v$CURRENT_VERSION"
            echo "üîç Looking for prerelease tag: $PRERELEASE_TAG"
            
            # Check if the prerelease exists and is marked as prerelease
            if gh release view "$PRERELEASE_TAG" >/dev/null 2>&1; then
              IS_PRERELEASE=$(gh release view "$PRERELEASE_TAG" --json isPrerelease --jq '.isPrerelease')
              if [ "$IS_PRERELEASE" = "true" ]; then
                echo "‚úÖ Found valid prerelease: $PRERELEASE_TAG"
                echo "üöÄ Promoting to full release..."
              else
                echo "‚ùå Release $PRERELEASE_TAG exists but is not marked as prerelease"
                exit 1
              fi
            else
              echo "‚ùå Prerelease $PRERELEASE_TAG not found"
              echo "üí° Push changes to main branch to create a prerelease first"
              exit 1
            fi
          else
            echo "‚ùå Current version ($CURRENT_VERSION) is not a prerelease"
            echo "üí° Push changes to main to create a prerelease first"
            exit 1
          fi

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - uses: prefix-dev/setup-pixi@v0.9.1
        with:
            pixi-version: v0.56.0
            cache: true
            frozen: true

      - run: pixi run -e build --frozen sync

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create release
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          set -e

          uv run semantic-release version

          if ! git diff --staged --quiet; then
            git commit -m "chore: additional changes [skip ci]"
          fi

          git push origin main
          git push --tags
          uv run semantic-release publish
          
      - name: Publish to PyPI (Trusted Publishing)
        if: github.event.inputs.release_type != 'prerelease'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true
