[project]
name = "dagster-slurm-example"
version = "1.0.0"
description = "Example project how to use dagster with slurm"
authors = [{ name = "Georg Heiler", email = "georg.heiler@ascii.ac.at" }]
requires-python = ">=3.12,<3.14"

[tool.pixi.project]
platforms = ["linux-64", "osx-arm64", "osx-64", "win-64", "linux-aarch64"]
channels = ["conda-forge"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pixi.environments]
secops = { features = [
  "secops",
], solve-group = "secops", no-default-feature = true }
opstooling = { features = [
  "opstooling",
], solve-group = "opstooling", no-default-feature = true }

ci-basics = { features = [
  "ci-basics",
  "opstooling",
], solve-group = "ci-basics" }
dev = { features = [
  "my-infrastructure",
  "dagster-basics",
  "dagster-webserver",
  "submission",
  "cluster",
  "ci-basics",
], solve-group = "dagster-slurm-example" }

[tool.pixi.feature.ci-basics.dependencies]
yamllint = ">=1.35.1,<2"
taplo = ">=0.9.3,<0.10"
pytest = ">=8.3.4,<9"
pytest-mock = ">=3.14.0,<4"
pytest-cov = "~=6.0.0"
ruff = ">=0.12.8,<1"
pyrefly = ">=0.27.2,<1"
[tool.pixi.feature.ci-basics.pypi-dependencies]

[tool.pixi.feature.dagster-basics.pypi-dependencies]
dagster = ">=1.11.0,<1.12"
dagster-postgres = ">=0.27.0,<0.28"
dagster-k8s = ">=0.27.0,<0.28"
dagster-docker = ">=0.27.0,<0.28"

[tool.pixi.feature.dagster-webserver.pypi-dependencies]
dagster-webserver = ">=1.11.0,<1.12"

[tool.pixi.feature.my-infrastructure.dependencies]
[tool.pixi.feature.my-infrastructure.pypi-dependencies]
dagster-slurm-example = { path = ".", editable = true }

[tool.pixi.feature.submission.dependencies]
[tool.pixi.feature.submission.pypi-dependencies]

[tool.pixi.feature.cluster.dependencies]
[tool.pixi.feature.cluster.pypi-dependencies]
# During live development
dagster-slurm = { path = "../projects/dagster-slurm", editable = true }
# when consuming the released package
# dagster-slurm = ">=0.0.1,<1"

[tool.pixi.feature.secops.dependencies]
go-sops = "~=3.10.2"
age = "~=1.2.1"

[tool.pixi.feature.opstooling.dependencies]
git = "~=2.49"
pixi-pack = ">=0.7.2,<1"

[tool.pixi.tasks]

[tool.pixi.tasks.start]
cmd = "pixi run -e dev --locked dagster dev"
cwd = "."
env = { DAGSTER_IS_DEV_CLI = "True" }
description = "Start dagster webserver in dev mode"

[tool.pixi.feature.secops.tasks.secrets-encrypt]
cmd = "./scripts/encrypt_secrets.sh"
description = "encrypt secrets with SOPS and AGE"

[tool.pixi.feature.secops.tasks.secrets-decrypt]
cmd = "./scripts/decrypt_secrets.sh"
description = "decrypt secrets with SOPS and AGE"

[tool.pixi.feature.opstooling.tasks.clean-local-branches]
cmd = "./scripts/git_clean_local_branches.sh"
description = "cleanup local non used branches"

[tool.pixi.tasks.fmt]
cmd = "pixi run -e ci-basics --frozen ruff format ./dagster_slurm_example && ruff check --fix ./dagster_slurm_example && yamllint -c yamllintconfig.yaml . && taplo fmt"
description = "Format python files"
env = { RUST_LOG = "warn" }

[tool.pixi.tasks.lint]
cmd = "ruff check ./dagster_slurm_example && yamllint -c yamllintconfig.yaml . && taplo check && pyrefly check"
description = "Validate formatting and type check python files"

[tool.pixi.tasks.test]
cmd = "pixi run -e dev --frozen pytest -m 'not data' ."
description = "Run only unit tests (excluding data tests)"

#[tool.pixi.tasks.pre-commit-install]
#cmd = "pre-commit install"
#description = "install pre-commit hooks"

#[tool.pixi.tasks.pre-commit-run]
#cmd = "pre-commit run --all-files"
#description = "run pre-commit on all files"

[tool.dagster]
module_name = "dagster_slurm_example"

[tool.dg]
directory_type = "project"

[tool.dg.project]
root_module = "dagster_slurm_example"
registry_modules = ["dagster_slurm_example.components.*"]


[tool.ruff]
exclude = [".git", "__pycache__", "build", "dist", ".pixi", "*.ipynb"]

line-length = 88

[tool.ruff.lint]
ignore = ["E501"]
select = ["F", "E", "W", "C", "B", "I"]

[tool.ruff.lint.mccabe]
max-complexity = 5

[tool.taplo]
exclude = ["pixi.lock"]

[tool.pytest.ini_options]
filterwarnings = [
  "ignore::DeprecationWarning:dagster.*",
  "ignore::DeprecationWarning:pydantic.*",
]
markers = [
  "data: tests using real input data",
]


[tool.pyrefly]
project-includes = [
    "dagster_slurm_example",
]
project-excludes = [
    "dagster_slurm_example/build",
]
search-path = [
    "dagster_slurm_example",
]
python-version = "3.13.5"

