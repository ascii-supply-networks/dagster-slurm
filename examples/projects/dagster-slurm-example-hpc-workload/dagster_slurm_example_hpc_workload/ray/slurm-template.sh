#!/bin/bash
# shellcheck disable=SC2206
# THIS FILE IS GENERATED BY AUTOMATION SCRIPT! PLEASE REFER TO ORIGINAL SCRIPT!
# THIS FILE IS A TEMPLATE AND IT SHOULD NOT BE DEPLOYED TO PRODUCTION!
${PARTITION_OPTION}
#SBATCH --job-name=${JOB_NAME}
#SBATCH --output=${JOB_NAME}.log
${GIVEN_NODE}
### This script works for any number of nodes, Ray will find and manage all resources
#SBATCH --nodes=${NUM_NODES}
#SBATCH --exclusive
#SBATCH --signal=TERM@60
### Give all resources to a single Ray task, ray can manage the resources internally
#SBATCH --ntasks-per-node=1
#SBATCH --gpus-per-task=${NUM_GPUS_PER_NODE}

set -euxo pipefail

# Shared sentinel file on a shared filesystem (e.g., your home/project dir)
SENTINEL="${SLURM_SUBMIT_DIR:-$PWD}/.ray_shutdown.${SLURM_JOB_ID:-$$}"

cleanup() {
  echo "--- Performing cleanup ---"
  : > "$SENTINEL"      # signal workers/head to stop

  # Optional but recommended on shared FS: let workers notice the sentinel.
  sleep 1

  wait || true   # wait for the srun steps to exit cleanly
  rm -f "$SENTINEL" || true    # tidy up
  echo "--- cleanup complete ---"
}
trap cleanup EXIT SIGINT SIGTERM

# ===== Environment (module/conda/etc) =====
${LOAD_ENV}

# ===== Compute Ray head address =====
redis_password=$(uuidgen); export redis_password

nodes=$(scontrol show hostnames "$SLURM_JOB_NODELIST")
nodes_array=($nodes)

head_node=${nodes_array[0]}
ip=$(srun --nodes=1 --ntasks=1 -w "$head_node" hostname --ip-address)

# Normalize to IPv4 if multiple IPs
if [[ "$ip" == *" "* ]]; then
  IFS=' ' read -ra ADDR <<< "$ip"
  if [[ ${#ADDR[0]} -gt 16 ]]; then ip=${ADDR[1]}; else ip=${ADDR[0]}; fi
  echo "Multiple IPs detected; using IPv4 $ip"
fi

port=6379
ip_head="$ip:$port"
export ip_head
export RAY_ADDRESS="$ip_head"
echo "Head node: $head_node | IP Head: $ip_head"

# ===== Start HEAD (daemon step that watches SENTINEL) =====
echo "STARTING HEAD at ${head_node}"
srun --export=ALL --nodes=1 --ntasks=1 -w "$head_node" \
  bash --noprofile --norc -lc '
    set -euo pipefail
    SENTINEL="'"$SENTINEL"'"
    # On TERM/INT from Slurm, stop Ray gracefully then exit 0.
    cleanup_node() { ray stop -v --grace-period 60 || true; exit 0; }
    trap cleanup_node TERM INT

    # Start Ray head and watch for shutdown
    ray start --head -v --node-ip-address="'"$ip"'" --port="'"$port"'" \
      --redis-password="'"$redis_password"'" --block &
    ray_pid=$!

    while :; do
      # If sentinel exists, stop Ray and exit 0
      [[ -f "$SENTINEL" ]] && cleanup_node
      # If Ray died for any reason, just exit 0 (step completes cleanly)
      if ! kill -0 "$ray_pid" 2>/dev/null; then exit 0; fi
      sleep 1
    done
  ' &

# ===== Wait for head ready =====
echo "Waiting for Ray head to be ready..."
for i in {1..40}; do
  if ray status --address "$ip_head" &>/dev/null; then
    echo "Ray head is ready."
    break
  fi
  if [[ $i -eq 40 ]]; then
    echo "Ray head failed to become ready in time." >&2
    exit 1
  fi
  sleep 2
done

# ===== Start WORKERS (each watches the same SENTINEL) =====
worker_num=$((SLURM_JOB_NUM_NODES - 1))
if (( worker_num > 0 )); then
  for ((i = 1; i <= worker_num; i++)); do
    node_i=${nodes_array[$i]}
    echo "STARTING WORKER $i at $node_i"
    srun --export=ALL --nodes=1 --ntasks=1 -w "$node_i" \
      bash --noprofile --norc -lc '
        set -euo pipefail
        SENTINEL="'"$SENTINEL"'"
        cleanup_node() { ray stop -v --grace-period 60 || true; exit 0; }
        trap cleanup_node TERM INT

        ray start -v --address="'"$ip_head"'" --redis-password="'"$redis_password"'" --block &
        ray_pid=$!

        while :; do
          [[ -f "$SENTINEL" ]] && cleanup_node
          if ! kill -0 "$ray_pid" 2>/dev/null; then exit 0; fi
          sleep 1
        done
      ' &
    # small gap avoids thundering herd on startup
    sleep 1
  done
fi

echo "All Ray nodes started. Giving workers a moment to register..."
sleep 5

# ===== Run your workload =====
echo "Running user's command: ${COMMAND_PLACEHOLDER}"
${COMMAND_PLACEHOLDER}
exit_code=$?

echo "User command finished with exit code $exit_code."
echo "Shutting down Ray cluster (creating sentinel)..."
# (trap will create the sentinel and wait for steps)
exit $exit_code
