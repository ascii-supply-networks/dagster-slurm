[project]
name = "dagster-slurm-workspace"
version = "1.3.1"
description = "Workspace root - not published"
readme = "README.md"
authors = [{ name = "geoheil", email = "georg.heiler@ascii.ac.at" }]
requires-python = ">=3.12,<3.13"
dependencies = []

[tool.uv]
package = false

[tool.uv.workspace]
members = ["projects/*"]

[build-system]
requires = ["uv_build>=0.8.8,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
  "yamllint>=1.35.1,<2",
  "taplo>=0.9.3,<0.10",
  "pytest>=8.3.4,<9",
  "pytest-mock>=3.14.0,<4",
  "pytest-cov~=6.0.0",
  "ruff>=0.12.8,<1",
  "pyrefly>=0.27.2,<1",
  "python-semantic-release~=10.3.1",
  "commitizen~=4.8.3",
]

[tool.pixi.project]
platforms = ["linux-64", "osx-arm64", "osx-64", "linux-aarch64", "win-64"]
channels = ["conda-forge"]

[tool.pixi.environments]
build = { features = ["build"], solve-group = "build" }

docs = { features = ["docs"], solve-group = "docs" }
explore = { features = ["build", "explore"], solve-group = "explore" }
[tool.pixi.feature.build.pypi-dependencies]
uv = ">=0.8.6"
build = ">=1.3.0"
dagster-slurm = { path = "./projects/dagster-slurm", editable = true }

[tool.pixi.feature.explore.dependencies]
ipykernel = "~=6.29"

[tool.pixi.feature.explore.pypi-dependencies]

[tool.pixi.feature.docs]
channels = ["conda-forge", "https://prefix.dev/brads-forge"]
[tool.pixi.feature.docs.dependencies]
nodejs = "~=24.4.1"
bun = ">=1.2.19,<2"
sphinx = "~=8.2.3"
[tool.pixi.feature.docs.pypi-dependencies]
sphinx-rtd-theme = "~=3.0.2"
autodoc-pydantic = "~=2.2.0"
sphinx-autodoc-typehints = "~=3.2.0"
myst-parser = "~=4.0.1"
sphinx-markdown-builder = ">=0.6.8,<1"
dagster-slurm = { path = "./projects/dagster-slurm", editable = true }
dagster-slurm-ray = { path = "./projects/dagster-slurm-ray", editable = true }
dagster-slurm-spark = { path = "./projects/dagster-slurm-spark", editable = true }

[tool.pixi.feature.build.tasks]
clean-lib = { cmd = "uv clean", cwd = "projects/dagster-slurm" }
release = { cmd = "uv run semantic-release publish", description = "Make new release" }

fmt = { cmd = "uv run -- ruff format projects && uv run -- yamllint -c examples/yamllintconfig.yaml projects && uv run -- taplo fmt", description = "Format" }
lint = { cmd = "uv run -- ruff check projects && uv run -- yamllint -c examples/yamllintconfig.yaml projects && uv run -- taplo check && uv run -- pyrefly check projects --python-interpreter $PIXI_PROJECT_ROOT/.pixi/envs/build/bin/python3.12", description = "Lint" }
test = { cmd = "uv run -- pytest projects", description = "Run all unit tests" }

[tool.pixi.feature.build.tasks.sync]
cmd = "uv sync --all-packages"
description = "uv sync"

[tool.pixi.feature.build.tasks.sync-lib-with-upgrade]
cmd = "uv sync --all-packages --upgrade"
description = "uv sync with upgrade"

[tool.pixi.feature.build.tasks.build-lib]
cmd = "uv build --all-packages"
cwd = "projects"
depends-on = ["clean-lib"]
description = "Cleanly build the library"

[tool.pixi.feature.build.tasks.publish-lib]
cmd = "uv publish --token $PYPI_TOKEN"
depends-on = ["build-lib"]
description = "Publish the library"

[tool.pixi.tasks.pre-commit-install]
cmd = "pre-commit install"
description = "install pre-commit hooks"

[tool.pixi.tasks.pre-commit-run]
cmd = "pre-commit run --all-files"
description = "run pre-commit on all files"

[tool.pixi.tasks.start]
cwd = "examples"
cmd = "pixi run -e dev --frozen start"
description = "Start example"

[tool.pixi.feature.docs.tasks.docs-install]
cmd = "bun install"
cwd = "docs"

[tool.pixi.feature.docs.tasks.slides-install]
cmd = "bun install"
cwd = "slides"

[tool.pixi.feature.docs.tasks.docs-build-python-api]
cmd = "bun run build:api"
cwd = "docs"
[tool.pixi.feature.docs.tasks.docs-serve]
cmd = "bun run start"
cwd = "docs"
depends-on = ["docs-install", "docs-build-python-api", "docs-collect-slides"]
description = "Serve docs locally"

[tool.pixi.feature.docs.tasks.docs-build]
cmd = "bun run build"
cwd = "docs"
depends-on = ["docs-install", "docs-build-python-api", "docs-collect-slides"]
description = "Build docs for serving"

[tool.pixi.feature.docs.tasks.slides]
cmd = "bun dev"
cwd = "slides"
depends-on = ["slides-install"]
description = "start slides server"

[tool.pixi.feature.docs.tasks.slides-export-pdf]
cmd = "bun run export"
cwd = "slides"
depends-on = ["slides-install"]
description = "expoert pdf"

[tool.pixi.feature.docs.tasks.slides-build]
cmd = "bun run build"
cwd = "slides"
depends-on = ["slides-install"]
description = "build static files"


[tool.pixi.feature.docs.tasks.slides-build-base]
cmd = "bun run build-base"
cwd = "slides"
depends-on = ["slides-install"]
description = "build static slides with base"


[tool.pixi.feature.docs.tasks.docs-collect-slides]
cmd = "bash -lc 'set -euo pipefail; rm -rf docs/static/slides; cp -R slides/dist/. docs/static/slides'"
depends-on = ["slides-build-base"]
description = "Copy Slidev dist into Docusaurus static/"


[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "pep621"
update_changelog_on_bump = false
tag_format = "v$version"

[tool.semantic_release]
version_toml = [
  "pyproject.toml:project.version",
  "projects/dagster-slurm/pyproject.toml:project.version",
  "projects/dagster-slurm-ray/pyproject.toml:project.version",
  "projects/dagster-slurm-spark/pyproject.toml:project.version",
]
build_command = "pixi update dagster-slurm && uv sync --all-packages && pixi run -e build --frozen build-lib && git add pixi.lock uv.lock"

commit_message = "{version} [skip ci]\n\nAutomatically generated by python-semantic-release"

[tool.semantic_release.commit_parser_options]
parse_squash_commits = true

[tool.semantic_release.branches.main]
match = "(main)"

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true
