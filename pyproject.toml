[project]
name = "dagster-slurm-workspace"
version = "0.0.1"
description = "Workspace root - not published"
readme = "README.md"
authors = [{ name = "geoheil", email = "georg.heiler@ascii.ac.at" }]
requires-python = ">=3.12,<3.13"
dependencies = []

[tool.uv]
package = false

[tool.uv.workspace]
members = ["projects/*"]

[build-system]
requires = ["uv_build>=0.7.20,<0.8.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
  "yamllint>=1.35.1,<2",
  "taplo>=0.9.3,<0.10",
  "pytest>=8.3.4,<9",
  "pytest-mock>=3.14.0,<4",
  "pytest-cov~=6.0.0",
  "ruff>=0.12.8,<1",
  "pyrefly>=0.27.2,<1",
  "python-semantic-release~=10.3.1",
  "commitizen~=4.8.3",
]

[tool.pixi.project]
platforms = ["linux-64", "osx-arm64", "osx-64", "linux-aarch64", "win-64"]
channels = ["conda-forge"]

[tool.pixi.environments]
build = { features = ["build"], solve-group = "build" }

docs = { features = ["docs"], solve-group = "docs" }

[tool.pixi.feature.build.pypi-dependencies]
uv = ">=0.8.6"
build = ">=1.3.0"

[tool.pixi.feature.docs]
channels = ["conda-forge", "https://prefix.dev/brads-forge"]
[tool.pixi.feature.docs.dependencies]
nodejs = "~=24.4.1"
bun = "~=1.2.19"
sphinx = "~=8.2.3"
[tool.pixi.feature.docs.pypi-dependencies]
sphinx-rtd-theme = "~=3.0.2"
myst-parser = "~=4.0.1"
sphinx-markdown-builder = ">=0.6.8,<1"
dagster-slurm = { path = "./projects/dagster-slurm", editable = true }


[tool.pixi.feature.build.tasks]
clean-lib = { cmd = "uv clean", cwd = "projects/dagster-slurm" }

fmt = { cmd = "uv run -- ruff format projects && uv run -- yamllint -c examples/yamllintconfig.yaml projects && uv run -- taplo fmt", description = "Format" }
lint = { cmd = "uv run -- ruff check projects && uv run -- yamllint -c examples/yamllintconfig.yaml projects && uv run -- taplo check && uv run -- pyrefly check projects", description = "Lint" }
test = { cmd = "uv run -- pytest projects", description = "Run all unit tests" }

[tool.pixi.feature.build.tasks.sync]
cmd = "uv sync --all-packages"
description = "uv sync"

[tool.pixi.feature.build.tasks.sync-lib-with-upgrade]
cmd = "uv sync --all-packages --upgrade"
description = "uv sync with upgrade"

[tool.pixi.feature.build.tasks.build-lib]
cmd = "uv build --all-packages"
cwd = "projects/dagster-slurm"
depends-on = ["clean-lib"]
description = "Cleanly build the library"

[tool.pixi.feature.build.tasks.publish-lib]
cmd = "uv publish --token $PYPI_TOKEN"
depends-on = ["build-lib"]
description = "Publish the library"

[tool.pixi.tasks.pre-commit-install]
cmd = "pre-commit install"
description = "install pre-commit hooks"

[tool.pixi.tasks.pre-commit-run]
cmd = "pre-commit run --all-files"
description = "run pre-commit on all files"

[tool.pixi.tasks.start]
cwd = "examples"
cmd = "pixi run -e dev --frozen start"
description = "Start example"

[tool.pixi.feature.docs.tasks.docs-install]
cmd = "bun install"
cwd = "docs"

[tool.pixi.feature.docs.tasks.docs-build-python-api]
cmd = "bun run build:api"
cwd = "docs"
[tool.pixi.feature.docs.tasks.docs-serve]
cmd = "bun run start"
cwd = "docs"
depends-on = ["docs-install", "docs-build-python-api"]
description = "Serve docs locally"

[tool.pixi.feature.docs.tasks.docs-build]
cmd = "bun run build"
cwd = "docs"
depends-on = ["docs-install", "docs-build-python-api"]
description = "Build docs for serving"



[tool.semantic_release]
#assets = []
build_command = "uv build --all-packages"
#build_command_env = []
#commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
#commit_parser = "conventional"
#logging_use_named_masks = false
#major_on_zero = true
#allow_zero_version = false
#repo_dir = "/Users/geoheil/development/ascii/dagster-slurm"
#no_git_verify = false
#tag_format = "v{version}"

[tool.semantic_release.branches.main]
#match = "(main|master)"
# TODO: Remove this
match = "(main|master|feat/initial-example)"
#prerelease_token = "rc"
#prerelease = false

#[tool.semantic_release.changelog]
#changelog_file = "CHANGELOG.md"
#exclude_commit_patterns = []
#mode = "update"
#insertion_flag = "<!-- version list -->"
#template_dir = "templates"

#[tool.semantic_release.changelog.default_templates]
#changelog_file = "CHANGELOG.md"
#output_format = "md"
#mask_initial_release = true

#[tool.semantic_release.changelog.environment]
#block_start_string = "{%"
#block_end_string = "%}"
#variable_start_string = "{{"
#variable_end_string = "}}"
#comment_start_string = "{#"
#comment_end_string = "#}"
#trim_blocks = false
#lstrip_blocks = false
#newline_sequence = "\n"
#keep_trailing_newline = false
#extensions = []
#autoescape = false

#[tool.semantic_release.commit_author]
#env = "GIT_COMMIT_AUTHOR"
#default = "semantic-release <semantic-release>"

#[tool.semantic_release.commit_parser_options]
#minor_tags = ["feat"]
#patch_tags = ["fix", "perf"]
#other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
#allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
#default_bump_level = 0
#parse_squash_commits = true
#ignore_merge_commits = true

#[tool.semantic_release.remote]
#name = "origin"
#type = "github"
#ignore_token_for_push = false
#insecure = false

#[tool.semantic_release.publish]
#dist_glob_patterns = ["dist/*"]
#upload_to_vcs_release = true

